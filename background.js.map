{"version":3,"sources":["services/chrome/constants.ts","services/chrome/index.ts","background.ts"],"names":[],"mappings":"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","file":"background.js","sourceRoot":"src","sourcesContent":["export const TITLES_KEY = 'titles';\n\nexport const COLORS: { [x: string]: string } = {\n  red: '#FF8C76',\n  yellow: '#FFEA6F',\n  blue: '#7CBBFF',\n  grey: '#d9d8d8',\n  green: '#AEFFD1',\n  pink: '#FF9FE7',\n  purple: '#E8D2FF',\n  cyan: '#A2E9FF',\n};\n\nexport const TAB_STATUSES = {\n  complete: 'complete',\n  loading: 'loading',\n};\n\nexport const GROUP_ID_NONE = -1;\n","import { StorageGroup, TabGroup, WindowGroup, WindowTab } from './entities';\nimport { TITLES_KEY } from './constants';\n\nexport const toWindowGroup = ({\n  id,\n  title,\n  color,\n  collapsed,\n}: WindowGroup): WindowGroup => ({\n  id,\n  title,\n  color,\n  collapsed,\n});\n\nexport const getStorage = async <T>(key: string): Promise<T> => {\n  return new Promise<T>((resolve) => {\n    chrome.storage.sync.get(key, (result) => resolve(result[key]));\n  });\n};\n\nexport const setStorage = async (key: string, value: any): Promise<void> => {\n  return new Promise<void>((resolve) => {\n    chrome.storage.sync.set({ [key]: value }, resolve);\n  });\n};\n\nexport const removeStorage = async (key: string): Promise<void> => {\n  return new Promise<void>((resolve) => {\n    chrome.storage.sync.remove(key, resolve);\n  });\n};\n\nexport const clearStorage = async (): Promise<void> => {\n  await new Promise<void>((resolve) => {\n    chrome.storage.sync.clear(resolve);\n  });\n  await setStorage(TITLES_KEY, []);\n};\n\nexport const setStorageGroup = async (group: StorageGroup): Promise<void[]> => {\n  const { title } = group;\n  const titles = await getStorage<string[]>(TITLES_KEY);\n  const titlesSet = new Set([...titles, title]);\n\n  return Promise.all([\n    await setStorage(TITLES_KEY, Array.from(titlesSet)),\n    await setStorage(title, group),\n  ]);\n};\n\nexport const removeStorageGroup = async (title: string): Promise<string[]> => {\n  const titles = await getStorage<string[]>(TITLES_KEY);\n  const newTitles = titles.filter((it) => it !== title);\n\n  Promise.all([\n    await setStorage(TITLES_KEY, newTitles),\n    await removeStorage(title),\n  ]);\n\n  return newTitles;\n};\n\nexport const getStorageGroups = async (): Promise<StorageGroup[]> => {\n  const titles = await getStorage<string[]>(TITLES_KEY);\n\n  return Promise.all(\n    titles.map(async (title) => {\n      return await getStorage<StorageGroup>(title);\n    }),\n  );\n};\n\nexport const getWindowGroups = async (\n  title?: string,\n  windowId = chrome.windows.WINDOW_ID_CURRENT,\n): Promise<WindowGroup[]> => {\n  return new Promise((resolve) => {\n    chrome.tabGroups.query({ title, windowId }, (groups: WindowGroup[]) => {\n      const windowGroups = groups.map(toWindowGroup);\n\n      resolve(windowGroups);\n    });\n  });\n};\n\nexport const removeStorageGroups = async (): Promise<string[]> => {\n  const storageGroups = await getStorageGroups();\n  const windowGroups = await getWindowGroups();\n  const windowGroupsTitles = windowGroups.map((it) => it.title);\n  const storageTitlesToRemove = storageGroups\n    .filter((it) => windowGroupsTitles.includes(it.title))\n    .map((it) => it.title);\n\n  for (let i = 0; i < storageTitlesToRemove.length; i++) {\n    await removeStorageGroup(storageTitlesToRemove[i]);\n  }\n\n  return storageTitlesToRemove;\n};\n\nexport const saveGroup = async (title: string): Promise<StorageGroup> => {\n  const groups = await getWindowGroups(title);\n  const color = groups[0].color;\n  const groupIds = groups.map((it) => it.id);\n  const windowTabs = await getWindowTabs();\n  const urls = windowTabs\n    .filter((it) => groupIds.includes(it.groupId))\n    .map((it) => it.url);\n  const newGroup = {\n    title,\n    color,\n    urls,\n  };\n\n  await setStorageGroup(newGroup);\n\n  return newGroup;\n};\n\nexport const saveAllGroups = async (): Promise<void> => {\n  const windowGroups = await getWindowGroups();\n\n  for (let i = 0; i < windowGroups.length; i++) {\n    await saveGroup(windowGroups[i].title);\n  }\n};\n\nexport const openGroup = async (title: string): Promise<void> => {\n  const storageGroup = await getStorage<StorageGroup>(title);\n  const [windowGroup] = await getWindowGroups(title);\n\n  if (windowGroup) {\n    const { id, collapsed } = windowGroup;\n    await updateGroup(id, { collapsed: !collapsed });\n    return;\n  }\n\n  if (storageGroup) {\n    const { title, color, urls } = storageGroup;\n    const tabs = await createTabs(urls);\n    const tabIds = tabs.map((it) => it.id);\n    const groupId = await combineTabs(tabIds);\n    await updateGroup(groupId, { title, color });\n  }\n};\n\nexport const getWindowTabs = async (\n  windowId = chrome.windows.WINDOW_ID_CURRENT,\n): Promise<WindowTab[]> => {\n  return new Promise((resolve) => {\n    chrome.tabs.query({ windowId }, resolve);\n  });\n};\n\nexport const createTabs = async (urls: string[]): Promise<WindowTab[]> => {\n  return Promise.all(\n    urls.map((url) => {\n      return new Promise<WindowTab>((resolve) => {\n        chrome.tabs.create({ url, active: false }, resolve);\n      });\n    }),\n  );\n};\n\nexport const combineTabs = async (tabIds: number[]): Promise<number> => {\n  return new Promise<number>((resolve) => {\n    chrome.tabs.group({ tabIds }, resolve);\n  });\n};\n\nexport const updateGroup = async (\n  groupId: number,\n  options: TabGroup | { collapsed?: boolean },\n): Promise<WindowGroup> => {\n  return new Promise((resolve) => {\n    chrome.tabGroups.update(groupId, options, resolve);\n  });\n};\n","import {\n  getStorage,\n  getWindowGroups,\n  saveGroup,\n  setStorage,\n} from './services/chrome';\nimport {\n  GROUP_ID_NONE,\n  TAB_STATUSES,\n  TITLES_KEY,\n} from './services/chrome/constants';\n\nchrome.runtime.onInstalled.addListener(async () => {\n  const titles = await getStorage(TITLES_KEY);\n\n  if (!titles) {\n    await setStorage(TITLES_KEY, []);\n  }\n});\n\nchrome.tabs.onUpdated.addListener(\n  async (\n    tabId: number,\n    changeInfo: any,\n    tab: { groupId: number; status: string },\n  ) => {\n    const { groupId, status } = tab;\n\n    if (groupId === GROUP_ID_NONE || status !== TAB_STATUSES.complete) {\n      return;\n    }\n\n    const windowGroups = await getWindowGroups();\n    const { title } = windowGroups.find((it) => it.id === groupId)!;\n    const storageGroup = await getStorage(title);\n\n    if (storageGroup) {\n      await saveGroup(title);\n    }\n  },\n);\n"]}